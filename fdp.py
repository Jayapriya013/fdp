# -*- coding: utf-8 -*-
"""fdp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pNF4uO0ulkNPw9PqpiiiI1pYev7bcvYD
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam

file_path=("/content/drive/MyDrive/flight delay prediction/Airline Delay (1).csv")

import pandas as pd
file_path=("/content/drive/MyDrive/flight delay prediction/Airline Delay (1).csv")
df=pd.read_csv(file_path)
df.head()

"""DATA PREPROCESSING MODULE"""

# Step 1: Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Step 2: Import libraries
import pandas as pd

# Step 3: Load and preprocess the dataset
def preprocess_airline_data(file_path):
  file_path=("/content/drive/MyDrive/flight delay prediction/Airline Delay (1).csv")
  df = pd.read_csv(file_path) # Corrected indentation

  # Drop rows with any null values
  df = df.dropna()

  # Remove rows with negative values in numeric columns
  numeric_cols = df.select_dtypes(include=['number']).columns
  df = df[(df[numeric_cols] >= 0).all(axis=1)]

  return df

# Replace this with your uploaded dataset path (you can upload it via Colab file panel)
file_path = '/content/Airline Delay (1).csv'  # After uploading the file in Colab

# Preprocess the dataset
clean_df = preprocess_airline_data(file_path)

# Step 4: Save cleaned dataset to your Google Drive
output_path = '/content/drive/My Drive/flight delay prediction/cleaned_airline_data.csv'
clean_df.to_csv(output_path, index=False)

print(f"✅ Cleaned dataset saved to: {output_path}")

"""FEATURE EXTRACTION MODULE"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from google.colab import drive

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Feature extraction with missing column generation
def preprocess_and_extract_features_full(file_path):
    file_path=("/content/drive/MyDrive/flight delay prediction/Airline Delay (1).csv")
    df = pd.read_csv(file_path)

    # Drop rows with missing values
    df = df.dropna()

    # Remove negative numeric values
    numeric_cols = df.select_dtypes(include=['number']).columns
    df = df[(df[numeric_cols] >= 0).all(axis=1)]

    # Step 3: Add missing time-based columns if not present
    rng = np.random.default_rng(seed=42)

    if 'scheduled_departure_time' not in df.columns:
        df['scheduled_departure_time'] = rng.integers(0, 24, size=len(df))

    if 'actual_departure_time' not in df.columns:
        df['actual_departure_time'] = df['scheduled_departure_time'] + rng.integers(0, 3, size=len(df))

    if 'scheduled_arrival_time' not in df.columns:
        df['scheduled_arrival_time'] = df['actual_departure_time'] + rng.integers(1, 4, size=len(df))

    if 'actual_arrival_time' not in df.columns:
        df['actual_arrival_time'] = df['scheduled_arrival_time'] + rng.integers(0, 3, size=len(df))

    # Cap max time to 23 (hours)
    for col in ['scheduled_departure_time', 'actual_departure_time',
                'scheduled_arrival_time', 'actual_arrival_time']:
        df[col] = df[col].clip(0, 23)

    # Step 4: Add flight_status column based on arrival delay
    if 'arr_del15' in df.columns:
        df['flight_status'] = df['arr_del15'].apply(lambda x: 'delayed' if x == 1 else 'on-time')
    else:
        df['flight_status'] = rng.choice(['on-time', 'delayed'], size=len(df))

    # Step 5: Encode categorical features
    label_encoders = {}
    cat_cols = df.select_dtypes(include=['object']).columns.tolist()
    for col in cat_cols:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le

    return df

# Step 6: Apply function and save to Google Drive
file_path = '/content/Airline Delay (1).csv'
df_final = preprocess_and_extract_features_full(file_path)

# Save cleaned & feature-extracted dataset
output_path = '/content/drive/My Drive/flight delay prediction/c'
df_final.to_csv(output_path, index=False)

print(f"✅ Feature-extracted dataset saved to: {output_path}")

import pandas as pd
import numpy as np
from google.colab import drive

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Clean, add required features, and preserve original string columns
def final_feature_extraction_with_strings(file_path):
    file_path=('/content/drive/My Drive/flight delay prediction/cleaned_airline_data.csv')
    df = pd.read_csv(file_path)

    # Step 2.1: Drop null values
    df = df.dropna()

    # Step 2.2: Remove rows with negative values in numeric columns only
    numeric_cols = df.select_dtypes(include=['number']).columns
    df = df[(df[numeric_cols] >= 0).all(axis=1)]

    # Step 2.3: Add time-based columns if not present
    rng = np.random.default_rng(seed=42)

    if 'scheduled_departure_time' not in df.columns:
        df['scheduled_departure_time'] = rng.integers(0, 24, size=len(df))

    if 'actual_departure_time' not in df.columns:
        df['actual_departure_time'] = df['scheduled_departure_time'] + rng.integers(0, 3, size=len(df))

    if 'scheduled_arrival_time' not in df.columns:
        df['scheduled_arrival_time'] = df['actual_departure_time'] + rng.integers(1, 4, size=len(df))

    if 'actual_arrival_time' not in df.columns:
        df['actual_arrival_time'] = df['scheduled_arrival_time'] + rng.integers(0, 3, size=len(df))

    # Clip all times to 23 (valid hour format)
    for col in ['scheduled_departure_time', 'actual_departure_time',
                'scheduled_arrival_time', 'actual_arrival_time']:
        df[col] = df[col].clip(0, 23)

    # Step 2.4: Add flight_status from arr_del15 if available
    if 'arr_del15' in df.columns:
        df['flight_status'] = df['arr_del15'].apply(lambda x: 'delayed' if x == 1 else 'on-time')
    else:
        df['flight_status'] = rng.choice(['on-time', 'delayed'], size=len(df))

    return df

# Step 3: Apply and Save
file_path = '/content/Airline Delay (1).csv'
final_df = final_feature_extraction_with_strings(file_path)

# Save to Google Drive
output_path = '/content/drive/My Drive/final_airline_features_with_strings.csv'
final_df.to_csv(output_path, index=False)

print(f"✅ Final dataset saved (with string columns preserved) to: {output_path}")

import pandas as pd
import numpy as np
from google.colab import drive

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Clean, add required features, and preserve original string columns
def final_feature_extraction_with_strings(file_path):
    file_path = '/content/drive/My Drive/flight delay prediction/cleaned_airline_data.csv'
    df = pd.read_csv(file_path)

    # Step 2.1: Drop null values
    df = df.dropna()

    # Step 2.2: Remove rows with negative values in numeric columns only
    numeric_cols = df.select_dtypes(include=['number']).columns
    df = df[(df[numeric_cols] >= 0).all(axis=1)]

    # Step 2.3: Add time-based columns if not present
    rng = np.random.default_rng(seed=42)

    if 'scheduled_departure_time' not in df.columns:
        df['scheduled_departure_time'] = rng.integers(0, 24, size=len(df))

    if 'actual_departure_time' not in df.columns:
        df['actual_departure_time'] = df['scheduled_departure_time'] + rng.integers(0, 3, size=len(df))

    if 'scheduled_arrival_time' not in df.columns:
        df['scheduled_arrival_time'] = df['actual_departure_time'] + rng.integers(1, 4, size=len(df))

    if 'actual_arrival_time' not in df.columns:
        df['actual_arrival_time'] = df['scheduled_arrival_time'] + rng.integers(0, 3, size=len(df))

    # Clip all times to 23 (valid hour format)
    for col in ['scheduled_departure_time', 'actual_departure_time',
                'scheduled_arrival_time', 'actual_arrival_time']:
        df[col] = df[col].clip(0, 23)

    # Convert times to HH:MM format
    for col in ['scheduled_departure_time', 'actual_departure_time',
                'scheduled_arrival_time', 'actual_arrival_time']:
        df[col] = df[col].apply(lambda x: f"{int(x):02d}:00")  # Format time to HH:00 (you can customize the minute as well)

    # Step 2.4: Add flight_status from arr_del15 if available
    if 'arr_del15' in df.columns:
        df['flight_status'] = df['arr_del15'].apply(lambda x: 'delayed' if x == 1 else 'on-time')
    else:
        df['flight_status'] = rng.choice(['on-time', 'delayed'], size=len(df))

    return df

# Step 3: Apply and Save
file_path = '/content/drive/My Drive/flight delay prediction/cleaned_airline_data.csv'
final_df = final_feature_extraction_with_strings(file_path)

# Save to Google Drive
output_path = '/content/drive/My Drive/final_airline_features_with_strings.csv'
final_df.to_csv(output_path, index=False)

print(f"✅ Final dataset saved (with time columns in HH:MM format) to: {output_path}")

import pandas as pd
import numpy as np
from google.colab import drive

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Clean, add required features, and preserve original string columns
def final_feature_extraction_with_strings(file_path):
    file_path = '/content/drive/My Drive/flight delay prediction/cleaned_airline_data.csv'
    df = pd.read_csv(file_path)

    # Step 2.1: Drop null values
    df = df.dropna()

    # Step 2.2: Remove rows with negative values in numeric columns only
    numeric_cols = df.select_dtypes(include=['number']).columns
    df = df[(df[numeric_cols] >= 0).all(axis=1)]

    # Step 2.3: Add time-based columns if not present
    rng = np.random.default_rng(seed=42)

    if 'scheduled_departure_time' not in df.columns:
        df['scheduled_departure_time'] = rng.integers(0, 24, size=len(df))

    if 'actual_departure_time' not in df.columns:
        df['actual_departure_time'] = df['scheduled_departure_time'] + rng.integers(0, 3, size=len(df))

    if 'scheduled_arrival_time' not in df.columns:
        df['scheduled_arrival_time'] = df['actual_departure_time'] + rng.integers(1, 4, size=len(df))

    if 'actual_arrival_time' not in df.columns:
        df['actual_arrival_time'] = df['scheduled_arrival_time'] + rng.integers(0, 3, size=len(df))

    # Clip all times to 23 (valid hour format)
    for col in ['scheduled_departure_time', 'actual_departure_time',
                'scheduled_arrival_time', 'actual_arrival_time']:
        df[col] = df[col].clip(0, 23)

    # Add 15 or 20-minute delays to simulate realistic delays
    def add_delay(time):
        # Randomly choose between a 15-minute or 20-minute delay
        delay = np.random.choice([15, 20])
        total_minutes = int(time) * 60 + delay  # Convert hours to minutes and add delay
        hours = (total_minutes // 60) % 24  # Get the hours (ensure it's within 24-hour format)
        minutes = total_minutes % 60  # Get the minutes
        return f"{hours:02d}:{minutes:02d}"

    # Apply delay to all relevant columns
    for col in ['scheduled_departure_time', 'actual_departure_time',
                'scheduled_arrival_time', 'actual_arrival_time']:
        df[col] = df[col].apply(add_delay)

    # Step 2.4: Add flight_status from arr_del15 if available
    if 'arr_del15' in df.columns:
        df['flight_status'] = df['arr_del15'].apply(lambda x: 'delayed' if x == 1 else 'on-time')
    else:
        df['flight_status'] = rng.choice(['on-time', 'delayed'], size=len(df))

    return df

# Step 3: Apply and Save
file_path = '/content/drive/My Drive/flight delay prediction/cleaned_airline_data.csv'
final_df = final_feature_extraction_with_strings(file_path)

# Save to Google Drive
output_path = '/content/drive/My Drive/final_airline_features_with_strings.csv'
final_df.to_csv(output_path, index=False)

print(f"✅ Final dataset saved (with time columns in HH:MM format with 15 or 20 min delays) to: {output_path}")

import pandas as pd
import numpy as np
from datetime import timedelta, datetime
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

def generate_random_time():
    hour = np.random.randint(0, 24)
    minute = np.random.randint(0, 60)
    return datetime(2023, 1, 1, hour, minute)  # Use a fixed date for simplicity

def format_time(dt):
    return dt.strftime('%H:%M')

def final_feature_extraction_with_realistic_times(file_path):
    df = pd.read_csv(file_path)
    df = df.dropna()

    # Remove rows with negative values in numeric columns
    numeric_cols = df.select_dtypes(include=['number']).columns
    df = df[(df[numeric_cols] >= 0).all(axis=1)]

    num_rows = len(df)
    scheduled_departure = []
    actual_departure = []
    scheduled_arrival = []
    actual_arrival = []

    for _ in range(num_rows):
        sched_dep = generate_random_time()
        act_dep = sched_dep + timedelta(minutes=np.random.randint(15, 21))  # 15-20 min delay

        sched_arr = act_dep + timedelta(minutes=np.random.randint(60, 121))  # flight duration 1–2 hrs
        act_arr = sched_arr + timedelta(minutes=np.random.randint(15, 21))  # 15-20 min delay

        scheduled_departure.append(format_time(sched_dep))
        actual_departure.append(format_time(act_dep))
        scheduled_arrival.append(format_time(sched_arr))
        actual_arrival.append(format_time(act_arr))

    df['scheduled_departure_time'] = scheduled_departure
    df['actual_departure_time'] = actual_departure
    df['scheduled_arrival_time'] = scheduled_arrival
    df['actual_arrival_time'] = actual_arrival

    # Add flight_status if not present
    if 'arr_del15' in df.columns:
        df['flight_status'] = df['arr_del15'].apply(lambda x: 'delayed' if x == 1 else 'on-time')
    else:
        df['flight_status'] = np.random.choice(['on-time', 'delayed'], size=num_rows)

    return df

# Apply the function and save
file_path = '/content/drive/My Drive/flight delay prediction/cleaned_airline_data.csv'
final_df = final_feature_extraction_with_realistic_times(file_path)

# Save the updated dataset
output_path = '/content/drive/My Drive/flight delay prediction/final_airline_times_HHMM.csv'
final_df.to_csv(output_path, index=False)

print(f"✅ Dataset saved with HH:MM time format and realistic delays at: {output_path}")

"""TRAIN AND TEST"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Load dataset
file_path = '/content/drive/My Drive/flight delay prediction/final_airline_times_HHMM.csv'
df = pd.read_csv(file_path)

# Convert time in HH:MM to total minutes
def time_to_minutes(t):
    h, m = map(int, str(t).split(':'))
    return h * 60 + m

for col in ['scheduled_departure_time', 'scheduled_arrival_time']:
    df[col] = df[col].apply(time_to_minutes)

# Drop columns that cause leakage (these are usually not known at prediction time)
leak_cols = ['actual_departure_time', 'actual_arrival_time', 'arr_del15']  # if they exist
df = df.drop(columns=[col for col in leak_cols if col in df.columns])

# Encode categorical variables (except target)
label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    if col != 'flight_status':
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le

# Encode target
target_le = LabelEncoder()
df['flight_status'] = target_le.fit_transform(df['flight_status'])  # 'delayed':1, 'on-time':0

# Split data
X = df.drop('flight_status', axis=1)
y = df['flight_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("✅ Model Evaluation (Leakage Removed):")
print("Accuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=target_le.classes_))

"""PREDICTION"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import joblib # Import joblib to save model and encoders

# Load dataset
file_path = '/content/drive/My Drive/flight delay prediction/final_airline_times_HHMM.csv'
df = pd.read_csv(file_path)

# Convert time in HH:MM to total minutes
def time_to_minutes(t):
    try:
        h, m = map(int, str(t).split(':'))
        return h * 60 + m
    except:
        # Added a more informative warning
        print(f"Warning: Could not parse time '{t}' in time_to_minutes. Returning 0.")
        return 0

for col in ['scheduled_departure_time', 'scheduled_arrival_time']:
    df[col] = df[col].apply(time_to_minutes)

# Drop columns that cause leakage (these are usually not known at prediction time)
leak_cols = ['actual_departure_time', 'actual_arrival_time', 'arr_del15']  # if they exist
df = df.drop(columns=[col for col in leak_cols if col in df.columns])

# Encode categorical variables (except target)
# Collect feature encoders here
feature_encoders = {}
for col in df.select_dtypes(include='object').columns:
    if col != 'flight_status':
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        feature_encoders[col] = le # Save the fitted encoder

# Encode target
target_le = LabelEncoder()
df['flight_status'] = target_le.fit_transform(df['flight_status'])  # 'delayed':1, 'on-time':0

# Split data
X = df.drop('flight_status', axis=1)
y = df['flight_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Store the list of feature columns
trained_features_cols = X_train.columns.tolist()

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("✅ Model Evaluation (Leakage Removed):")
print("Accuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=target_le.classes_))

# --- Save model and related objects ---
model_save_path = '/content/drive/My Drive/flight delay prediction/flight_delay_model.pkl'
target_encoder_save_path = '/content/drive/My Drive/flight delay prediction/flight_status_encoder.pkl'
feature_encoders_save_path = '/content/drive/My Drive/flight delay prediction/feature_encoders.pkl'
feature_columns_save_path = '/content/drive/My Drive/flight delay prediction/feature_columns.pkl'

joblib.dump(model, model_save_path)
joblib.dump(target_le, target_encoder_save_path) # Save the target encoder
joblib.dump(feature_encoders, feature_encoders_save_path) # Save the feature encoders dictionary
joblib.dump(trained_features_cols, feature_columns_save_path) # Save the list of feature columns

print(f"\n✅ Model saved to: {model_save_path}")
print(f"✅ Target encoder saved to: {target_encoder_save_path}")
print(f"✅ Feature encoders saved to: {feature_encoders_save_path}")
print(f"✅ Feature columns list saved to: {feature_columns_save_path}")

import pandas as pd
import joblib

# --- Load the model and encoders ---
model = joblib.load('/content/drive/My Drive/flight delay prediction/flight_delay_model.pkl')
target_le = joblib.load('/content/drive/My Drive/flight delay prediction/flight_status_encoder.pkl')
feature_encoders = joblib.load('/content/drive/My Drive/flight delay prediction/feature_encoders.pkl')
trained_features_cols = joblib.load('/content/drive/My Drive/flight delay prediction/feature_columns.pkl')

# --- Function to convert time in HH:MM to total minutes ---
def time_to_minutes(t):
    try:
        h, m = map(int, str(t).split(':'))
        return h * 60 + m
    except:
        print(f"Warning: Could not parse time '{t}' in time_to_minutes. Returning 0.")
        return 0

# --- Example input data (new flight data) ---
new_data = {
    'carrier': ['AA'],
    'carrier_name': ['American Airlines'],
    'airport': ['JFK'],
    'airport_name': ['John F Kennedy International'],
    'scheduled_departure_time': ['08:45'],
    'scheduled_arrival_time': ['10:30'],
    'actual_departure_time': ['08:50'],  # Actual departure time
    'actual_arrival_time': ['10:40']     # Actual arrival time
}

# Convert to DataFrame
df_new = pd.DataFrame(new_data)

# --- Convert time columns to minutes ---
for col in ['scheduled_departure_time', 'scheduled_arrival_time', 'actual_departure_time', 'actual_arrival_time']:
    df_new[col] = df_new[col].apply(time_to_minutes)

# --- Logic to determine if the flight is delayed based on time differences ---
def check_delay(row):
    departure_diff = abs(row['scheduled_departure_time'] - row['actual_departure_time'])
    arrival_diff = abs(row['scheduled_arrival_time'] - row['actual_arrival_time'])

    # If either departure or arrival is delayed by more than 15 minutes
    if departure_diff > 15 or arrival_diff > 15:
        return "Delayed"
    else:
        return "On-time"

# Apply the check_delay function to each row to create a new column with the result
df_new['flight_status'] = df_new.apply(check_delay, axis=1)

# --- Print the flight status ---
print(f"Flight Status: {df_new['flight_status'][0]}")

import pandas as pd
import joblib

# --- Load the model and encoders ---
model = joblib.load('/content/drive/My Drive/flight delay prediction/flight_delay_model.pkl')
target_le = joblib.load('/content/drive/My Drive/flight delay prediction/flight_status_encoder.pkl')
feature_encoders = joblib.load('/content/drive/My Drive/flight delay prediction/feature_encoders.pkl')
trained_features_cols = joblib.load('/content/drive/My Drive/flight delay prediction/feature_columns.pkl')

# --- Function to convert time in HH:MM to total minutes ---
def time_to_minutes(t):
    try:
        h, m = map(int, str(t).split(':'))
        return h * 60 + m
    except:
        print(f"Warning: Could not parse time '{t}' in time_to_minutes. Returning 0.")
        return 0

# --- Example input data (new flight data) ---
new_data = {
    'carrier': ['AA'],
    'carrier_name': ['American Airlines'],
    'airport': ['JFK'],
    'airport_name': ['John F Kennedy International'],
    'scheduled_departure_time': ['08:45'],
    'scheduled_arrival_time': ['10:30'],
    'actual_departure_time': ['09:00'],  # Actual departure time
    'actual_arrival_time': ['10:50']     # Actual arrival time
}

# Convert to DataFrame
df_new = pd.DataFrame(new_data)

# --- Convert time columns to minutes ---
for col in ['scheduled_departure_time', 'scheduled_arrival_time', 'actual_departure_time', 'actual_arrival_time']:
    df_new[col] = df_new[col].apply(time_to_minutes)

# --- Logic to determine if the flight is delayed based on time differences ---
def check_delay(row):
    departure_diff = abs(row['scheduled_departure_time'] - row['actual_departure_time'])
    arrival_diff = abs(row['scheduled_arrival_time'] - row['actual_arrival_time'])

    # If either departure or arrival is delayed by more than 15 minutes
    if departure_diff > 15 or arrival_diff > 15:
        return "Delayed"
    else:
        return "On-time"

# Apply the check_delay function to each row to create a new column with the result
df_new['flight_status'] = df_new.apply(check_delay, axis=1)

# --- Print the flight status ---
print(f"Flight Status: {df_new['flight_status'][0]}")